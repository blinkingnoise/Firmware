diff -urN mbed.clean/workspace_tools/make.py mbed/workspace_tools/make.py
--- mbed.clean/workspace_tools/make.py	2014-08-10 13:45:11.539782004 +0200
+++ mbed/workspace_tools/make.py	2014-08-10 13:45:59.483781146 +0200
@@ -31,7 +31,7 @@
 from workspace_tools.options import get_default_options_parser
 from workspace_tools.build_api import build_project
 from workspace_tools.tests import TESTS, Test, TEST_MAP
-from workspace_tools.paths import BUILD_DIR, RTOS_LIBRARIES
+from workspace_tools.paths import BUILD_DIR, RTOS_LIBRARIES, ETH_LIBRARY
 from workspace_tools.targets import TARGET_MAP
 from workspace_tools.utils import args_error
 try:
@@ -84,6 +84,11 @@
     # without the rtos
     parser.add_option("--rtos", action="store_true", dest="rtos",
                       default=False, help="Link to the rtos")
+    parser.add_option("--net", action="store_true", dest="net",
+                      default=False, help="Link to the Network libraries")
+    parser.add_option("--usb", action="store_true", dest="usb",
+                     default=False, help="Link to the USB libraries")
+
 
     # Specify a different linker script
     parser.add_option("-l", "--linker", dest="linker_script",
@@ -132,6 +137,8 @@
     toolchain = options.tool
 
     # Test
+    print(p)
+    print(options.dependencies)
     test = Test(p)
     if options.automated is not None:
         test.automated = options.automated
@@ -150,9 +157,14 @@
         print 'The selected test is not supported on target %s with toolchain %s' % (mcu, toolchain)
         sys.exit()
 
+    print(test.dependencies)
+
     # RTOS
     if options.rtos:
         test.dependencies.append(RTOS_LIBRARIES)
+    if options.net:
+        test.dependencies.append( ETH_LIBRARY )
+
 
     build_dir = join(BUILD_DIR, "test", mcu, toolchain, test.id)
     if options.source_dir is not None:
diff -urN mbed.clean/workspace_tools/make.py.orig mbed/workspace_tools/make.py.orig
--- mbed.clean/workspace_tools/make.py.orig	1970-01-01 01:00:00.000000000 +0100
+++ mbed/workspace_tools/make.py.orig	2014-08-10 13:45:11.539782004 +0200
@@ -0,0 +1,213 @@
+#! /usr/bin/env python
+"""
+mbed SDK
+Copyright (c) 2011-2013 ARM Limited
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+
+TEST BUILD & RUN
+"""
+import sys
+from os.path import join, abspath, dirname
+from subprocess import call
+from shutil import copy
+from time import sleep
+
+# Be sure that the tools directory is in the search path
+ROOT = abspath(join(dirname(__file__), ".."))
+sys.path.insert(0, ROOT)
+
+from workspace_tools.options import get_default_options_parser
+from workspace_tools.build_api import build_project
+from workspace_tools.tests import TESTS, Test, TEST_MAP
+from workspace_tools.paths import BUILD_DIR, RTOS_LIBRARIES
+from workspace_tools.targets import TARGET_MAP
+from workspace_tools.utils import args_error
+try:
+    import workspace_tools.private_settings as ps
+except:
+    ps = object()
+
+
+if __name__ == '__main__':
+    # Parse Options
+    parser = get_default_options_parser()
+    parser.add_option("-p", type="int", dest="program",
+                      help="The index of the desired test program: [0-%d]" % (len(TESTS)-1))
+    parser.add_option("-n", dest="program_name",
+                      help="The name of the desired test program")
+    parser.add_option("-j", "--jobs", type="int", dest="jobs",
+                      default=1, help="Number of concurrent jobs (default 1). Use 0 for auto based on host machine's number of CPUs")
+    parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
+                      default=False, help="Verbose diagnostic output")
+    parser.add_option("-D", "", action="append", dest="macros",
+                      help="Add a macro definition")
+
+    # Local run
+    parser.add_option("--automated", action="store_true", dest="automated",
+                      default=False, help="Automated test")
+    parser.add_option("--host", dest="host_test",
+                      default=None, help="Host test")
+    parser.add_option("--extra", dest="extra",
+                      default=None, help="Extra files")
+    parser.add_option("--peripherals", dest="peripherals",
+                      default=None, help="Required peripherals")
+    parser.add_option("--dep", dest="dependencies",
+                      default=None, help="Dependencies")
+    parser.add_option("--source", dest="source_dir",
+                      default=None, help="The source (input) directory")
+    parser.add_option("--duration", type="int", dest="duration",
+                      default=None, help="Duration of the test")
+    parser.add_option("--build", dest="build_dir",
+                      default=None, help="The build (output) directory")
+    parser.add_option("-d", "--disk", dest="disk",
+                      default=None, help="The mbed disk")
+    parser.add_option("-s", "--serial", dest="serial",
+                      default=None, help="The mbed serial port")
+    parser.add_option("-b", "--baud", type="int", dest="baud",
+                      default=None, help="The mbed serial baud rate")
+    parser.add_option("-L", "--list-tests", action="store_true", dest="list_tests",
+                      default=False, help="List available tests in order and exit")
+
+    # Ideally, all the tests with a single "main" thread can be run with, or
+    # without the rtos
+    parser.add_option("--rtos", action="store_true", dest="rtos",
+                      default=False, help="Link to the rtos")
+
+    # Specify a different linker script
+    parser.add_option("-l", "--linker", dest="linker_script",
+                      default=None, help="use the specified linker script")
+
+    (options, args) = parser.parse_args()
+
+    # Print available tests in order and exit
+    if options.list_tests is True:
+        print '\n'.join(map(str, sorted(TEST_MAP.values())))
+        sys.exit()
+
+    # force program to "0" if a source dir is specified
+    if options.source_dir is not None:
+        p = 0
+        n = None
+    else:
+    # Program Number or name
+        p, n = options.program, options.program_name
+
+    if n is not None and p is not None:
+        args_error(parser, "[ERROR] specify either '-n' or '-p', not both")
+    if n:
+        if not n in TEST_MAP.keys():
+            # Check if there is an alias for this in private_settings.py
+            if getattr(ps, "test_alias", None) is not None:
+                alias = ps.test_alias.get(n, "")
+                if not alias in TEST_MAP.keys():
+                    args_error(parser, "[ERROR] Program with name '%s' not found" % n)
+                else:
+                    n = alias
+        p = TEST_MAP[n].n
+    if p is None or (p < 0) or (p > (len(TESTS)-1)):
+        message = "[ERROR] You have to specify one of the following tests:\n"
+        message += '\n'.join(map(str, sorted(TEST_MAP.values())))
+        args_error(parser, message)
+
+    # Target
+    if options.mcu is None :
+        args_error(parser, "[ERROR] You should specify an MCU")
+    mcu = options.mcu
+
+    # Toolchain
+    if options.tool is None:
+        args_error(parser, "[ERROR] You should specify a TOOLCHAIN")
+    toolchain = options.tool
+
+    # Test
+    test = Test(p)
+    if options.automated is not None:
+        test.automated = options.automated
+    if options.dependencies is not None:
+        test.dependencies = options.dependencies
+    if options.host_test is not None:
+        test.host_test = options.host_test;
+    if options.peripherals is not None:
+        test.peripherals = options.peripherals;
+    if options.duration is not None:
+        test.duration = options.duration;
+    if options.extra is not None:
+        test.extra_files = options.extra
+
+    if not test.is_supported(mcu, toolchain):
+        print 'The selected test is not supported on target %s with toolchain %s' % (mcu, toolchain)
+        sys.exit()
+
+    # RTOS
+    if options.rtos:
+        test.dependencies.append(RTOS_LIBRARIES)
+
+    build_dir = join(BUILD_DIR, "test", mcu, toolchain, test.id)
+    if options.source_dir is not None:
+        test.source_dir = options.source_dir
+        build_dir = options.source_dir
+
+    if options.build_dir is not None:
+        build_dir = options.build_dir
+
+    target = TARGET_MAP[mcu]
+    try:
+        bin = build_project(test.source_dir, build_dir, target, toolchain,
+                            test.dependencies, options.options,
+                            linker_script=options.linker_script,
+                            clean=options.clean, verbose=options.verbose,
+                            macros=options.macros, jobs=options.jobs)
+        print 'Image: %s' % bin
+
+        if options.disk:
+            # Simple copy to the mbed disk
+            copy(bin, options.disk)
+
+        if options.serial:
+            # Import pyserial: https://pypi.python.org/pypi/pyserial
+            from serial import Serial
+
+            sleep(target.program_cycle_s())
+
+            serial = Serial(options.serial, timeout = 1)
+            if options.baud:
+                serial.setBaudrate(options.baud)
+
+            serial.flushInput()
+            serial.flushOutput()
+
+            try:
+                serial.sendBreak()
+            except:
+                # In linux a termios.error is raised in sendBreak and in setBreak.
+                # The following setBreak() is needed to release the reset signal on the target mcu.
+                try:
+                    serial.setBreak(False)
+                except:
+                    pass
+
+            while True:
+                c = serial.read(512)
+                sys.stdout.write(c)
+                sys.stdout.flush()
+
+    except KeyboardInterrupt, e:
+        print "\n[CTRL+c] exit"
+    except Exception,e:
+        if options.verbose:
+            import traceback
+            traceback.print_exc(file=sys.stdout)
+        else:
+            print "[ERROR] %s" % str(e)
diff -urN mbed.clean/workspace_tools/tests.py mbed/workspace_tools/tests.py
--- mbed.clean/workspace_tools/tests.py	2014-08-10 13:45:11.543782004 +0200
+++ mbed/workspace_tools/tests.py	2014-08-10 13:45:59.487781146 +0200
@@ -708,6 +708,16 @@
         "host_test": "udp_link_layer_auto.py",
         "peripherals": ["ethernet"],
     },
+    {
+        "id": "NET_14", "description": "TFTPServer",
+        "source_dir": join(TEST_DIR, "net", "protocols", "TFTPServer"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY,  SD_FS, FAT_FS],
+    },
+    {
+        "id": "laser", "description": "LaosLaser",
+        "source_dir": join(TEST_DIR, "net", "protocols", "laser"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY], #,  SD_FS, FAT_FS],
+    },
 
     # u-blox tests
     {
diff -urN mbed.clean/workspace_tools/tests.py.orig mbed/workspace_tools/tests.py.orig
--- mbed.clean/workspace_tools/tests.py.orig	1970-01-01 01:00:00.000000000 +0100
+++ mbed/workspace_tools/tests.py.orig	2014-08-10 13:45:11.543782004 +0200
@@ -0,0 +1,924 @@
+"""
+mbed SDK
+Copyright (c) 2011-2013 ARM Limited
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+"""
+from workspace_tools.paths import *
+from workspace_tools.data.support import *
+
+TEST_CMSIS_LIB = join(TEST_DIR, "cmsis", "lib")
+TEST_MBED_LIB = join(TEST_DIR, "mbed", "env")
+
+PERIPHERALS = join(TEST_DIR, "peripherals")
+BENCHMARKS_DIR = join(TEST_DIR, "benchmarks")
+
+SD = join(TEST_DIR, "sd")
+TMP102 = join(PERIPHERALS, 'TMP102')
+
+"""
+Wiring:
+  * Ground:
+    * LPC1*: p1
+    * KL25Z: GND
+
+  * Vout
+    * LPC1*: p40
+    * KL25Z: P3V3
+
+  * TMP102 (I2C):
+      * LPC1*: (SDA=p28 , SCL=p27)
+      * KL25Z: (SDA=PTC9, SCL=PTC8)
+
+  * digital_loop (Digital(In|Out|InOut), InterruptIn):
+      * Arduino headers: (D0 <-> D7)
+      * LPC1549: (D2 <-> D7)
+      * LPC1*: (p5   <-> p25 )
+      * KL25Z: (PTA5<-> PTC6)
+      * NUCLEO_F103RB: (PC_6 <-> PB_8)
+
+  * port_loop (Port(In|Out|InOut)):
+      * Arduino headers: (D0 <-> D7), (D1 <-> D6)
+      * LPC1*: (p5   <-> p25), (p6   <-> p26)
+      * KL25Z: (PTA5 <-> PTC6), (PTA4 <-> PTC5)
+      * NUCLEO_F103RB: (PC_6 <-> PB_8), (PC_5 <-> PB_9)
+
+  * analog_loop (AnalogIn, AnalogOut):
+      * Arduino headers: (A0 <-> A5)
+      * LPC1549: (A0 <-> D12)
+      * LPC1*: (p17   <-> p18 )
+      * KL25Z: (PTE30 <-> PTC2)
+
+  * SD (SPI):
+      * LPC1*: (mosi=p11 , miso=p12 , sclk=p13 , cs=p14 )
+      * KL25Z: (mosi=PTD2, miso=PTD3, sclk=PTD1, cs=PTD0)
+
+  * MMA7660 (I2C):
+      * LPC1*: (SDA=p28 , SCL=p27)
+
+  * i2c_loop:
+      * LPC1768: (p28 <-> p9), (p27 <-> p10)
+
+  * i2c_eeprom:
+      * LPC1*: (SDA=p28 , SCL=p27)
+      * KL25Z: (SDA=PTE0, SCL=PTE1)
+"""
+TESTS = [
+    # Automated MBED tests
+    {
+        "id": "MBED_A1", "description": "Basic",
+        "source_dir": join(TEST_DIR, "mbed", "basic"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+    },
+    {
+        "id": "MBED_A2", "description": "Semihost file system",
+        "source_dir": join(TEST_DIR, "mbed", "file"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC2368", "LPC11U24"]
+    },
+    {
+        "id": "MBED_A3", "description": "C++ STL",
+        "source_dir": join(TEST_DIR, "mbed", "stl"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": False,
+    },
+    {
+        "id": "MBED_A4", "description": "I2C TMP102",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_TMP102"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, TMP102],
+        "automated": True,
+        "peripherals": ["TMP102"]
+    },
+    {
+        "id": "MBED_A5", "description": "DigitalIn DigitalOut",
+        "source_dir": join(TEST_DIR, "mbed", "digitalin_digitalout"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "peripherals": ["digital_loop"]
+    },
+    {
+        "id": "MBED_A6", "description": "DigitalInOut",
+        "source_dir": join(TEST_DIR, "mbed", "digitalinout"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "peripherals": ["digital_loop"]
+    },
+    {
+        "id": "MBED_A7", "description": "InterruptIn",
+        "source_dir": join(TEST_DIR, "mbed", "interruptin"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "peripherals": ["digital_loop"]
+    },
+    {
+        "id": "MBED_A8", "description": "Analog",
+        "source_dir": join(TEST_DIR, "mbed", "analog"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "peripherals": ["analog_loop"],
+        "mcu": ["LPC1768", "LPC2368", "KL25Z", "K64F", "LPC4088", "LPC1549"]
+    },
+    {
+        "id": "MBED_A9", "description": "Serial Echo at 115200",
+        "source_dir": join(TEST_DIR, "mbed", "echo"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "host_test": "echo"
+    },
+    {
+        "id": "MBED_A10", "description": "PortOut PortIn",
+        "source_dir": join(TEST_DIR, "mbed", "portout_portin"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "peripherals": ["port_loop"],
+        "supported": DEFAULT_SUPPORT,
+        "automated": True,
+    },
+    {
+        "id": "MBED_A11", "description": "PortInOut",
+        "source_dir": join(TEST_DIR, "mbed", "portinout"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "peripherals": ["port_loop"],
+        "supported": DEFAULT_SUPPORT,
+        "automated": True,
+    },
+    {
+        "id": "MBED_A12", "description": "SD File System",
+        "source_dir": join(TEST_DIR, "mbed", "sd"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, FS_LIBRARY],
+        "automated": True,
+        "duration": 15,
+        "peripherals": ["SD"]
+    },
+    {
+        "id": "MBED_A13", "description": "I2C MMA7660",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_MMA7660"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, join(PERIPHERALS, 'MMA7660')],
+        "peripherals": ["MMA7660"]
+    },
+    {
+        "id": "MBED_A14", "description": "I2C Master",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_master"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+    },
+    {
+        "id": "MBED_A15", "description": "I2C Slave",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_slave"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+    },
+    {
+        "id": "MBED_A16", "description": "SPI Master",
+        "source_dir": join(TEST_DIR, "mbed", "spi_master"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+    },
+    {
+        "id": "MBED_A17", "description": "SPI Slave",
+        "source_dir": join(TEST_DIR, "mbed", "spi_slave"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+    },
+    {
+        "id": "MBED_A18", "description": "Interrupt vector relocation",
+        "source_dir": join(TEST_DIR, "mbed", "vtor_reloc"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+        "mcu": ["LPC1768"],
+        "automated": True,
+    },
+    {
+        "id": "MBED_A19", "description": "I2C EEPROM read/write test",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_eeprom"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "peripherals": ["24LC256"],
+        "automated": True,
+        "duration": 15,
+    },
+    {
+        "id": "MBED_A20", "description": "I2C master/slave test",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_master_slave"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB,],
+        "mcu": ["LPC1768"],
+        "peripherals": ["i2c_loop"]
+    },
+    {
+        "id": "MBED_A21", "description": "Call function before main (mbed_main)",
+        "source_dir": join(TEST_DIR, "mbed", "call_before_main"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": False,
+    },
+    {
+        "id": "MBED_A22", "description": "SPIFI for LPC4088 (test 1)",
+        "source_dir": join(TEST_DIR, "mbed", "spifi1"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC4088"]
+    },
+    {
+        "id": "MBED_A23", "description": "SPIFI for LPC4088 (test 2)",
+        "source_dir": join(TEST_DIR, "mbed", "spifi2"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC4088"]
+    },
+    {
+        "id": "MBED_A24", "description": "Serial echo with RTS/CTS flow control",
+        "source_dir": join(TEST_DIR, "mbed", "echo_flow_control"),
+        "dependencies": [MBED_LIBRARIES],
+        "automated": "True",
+        "host_test": "echo_flow_control",
+        "mcu": ["LPC1768"],
+        "peripherals": ["extra_serial"]
+    },
+    {
+        "id": "MBED_A25", "description": "I2C EEPROM line read/write test",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_eeprom_line"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "peripherals": ["24LC256"],
+        "automated": True,
+        "duration": 10,
+    },
+    {
+        "id": "MBED_BLINKY", "description": "Blinky",
+        "source_dir": join(TEST_DIR, "mbed", "blinky"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": False,
+    },
+    {
+        "id": "MBED_BUS", "description": "Blinky BUS",
+        "source_dir": join(TEST_DIR, "mbed", "bus"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": False,
+        "duration": 15,
+    },
+
+    # Size benchmarks
+    {
+        "id": "BENCHMARK_1", "description": "Size (c environment)",
+        "source_dir": join(BENCHMARKS_DIR, "cenv"),
+        "dependencies": [MBED_LIBRARIES]
+    },
+    {
+        "id": "BENCHMARK_2", "description": "Size (float math)",
+        "source_dir": join(BENCHMARKS_DIR, "float_math"),
+        "dependencies": [MBED_LIBRARIES]
+    },
+    {
+        "id": "BENCHMARK_3", "description": "Size (printf)",
+        "source_dir": join(BENCHMARKS_DIR, "printf"),
+        "dependencies": [MBED_LIBRARIES]
+    },
+    {
+        "id": "BENCHMARK_4", "description": "Size (mbed libs)",
+        "source_dir": join(BENCHMARKS_DIR, "mbed"),
+        "dependencies": [MBED_LIBRARIES]
+    },
+    {
+        "id": "BENCHMARK_5", "description": "Size (all)",
+        "source_dir": join(BENCHMARKS_DIR, "all"),
+        "dependencies": [MBED_LIBRARIES]
+    },
+
+    # Not automated MBED tests
+    {
+        "id": "MBED_1", "description": "I2C SRF08",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_SRF08"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, join(PERIPHERALS, 'SRF08')],
+        "peripherals": ["SRF08"]
+    },
+    {
+        "id": "MBED_2", "description": "stdio",
+        "source_dir": join(TEST_DIR, "mbed", "stdio"),
+        "dependencies": [MBED_LIBRARIES],
+        "duration": 20,
+        "automated": True,
+        "host_test": "stdio_auto"
+    },
+    {
+        "id": "MBED_3", "description": "PortOut",
+        "source_dir": join(TEST_DIR, "mbed", "portout"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_4", "description": "Sleep",
+        "source_dir": join(TEST_DIR, "mbed", "sleep"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "duration": 30,
+        "mcu": ["LPC1768", "LPC11U24", "LPC4088","NRF51822"]
+    },
+    {
+        "id": "MBED_5", "description": "PWM",
+        "source_dir": join(TEST_DIR, "mbed", "pwm"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+    },
+    {
+        "id": "MBED_6", "description": "SW Reset",
+        "source_dir": join(TEST_DIR, "mbed", "reset"),
+        "dependencies": [MBED_LIBRARIES],
+        "duration": 15
+    },
+    {
+        "id": "MBED_7", "description": "stdio  benchmark",
+        "source_dir": join(TEST_DIR, "mbed", "stdio_benchmark"),
+        "dependencies": [MBED_LIBRARIES],
+        "duration": 40
+    },
+    {
+        "id": "MBED_8", "description": "SPI",
+        "source_dir": join(TEST_DIR, "mbed", "spi"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_9", "description": "Sleep Timeout",
+        "source_dir": join(TEST_DIR, "mbed", "sleep_timeout"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_10", "description": "Hello World",
+        "source_dir": join(TEST_DIR, "mbed", "hello"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "host_test": "hello_auto",
+    },
+    {
+        "id": "MBED_11", "description": "Ticker Int",
+        "source_dir": join(TEST_DIR, "mbed", "ticker"),
+        "dependencies": [MBED_LIBRARIES],
+        "automated": True,
+        "host_test": "wait_us_auto",
+        "duration": 20,
+    },
+    {
+        "id": "MBED_12", "description": "C++",
+        "source_dir": join(TEST_DIR, "mbed", "cpp"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True
+    },
+    {
+        "id": "MBED_13", "description": "Heap & Stack",
+        "source_dir": join(TEST_DIR, "mbed", "heap_and_stack"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+    },
+    {
+        "id": "MBED_14", "description": "Serial Interrupt",
+        "source_dir": join(TEST_DIR, "mbed", "serial_interrupt"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+    },
+    {
+        "id": "MBED_15", "description": "RPC",
+        "source_dir": join(TEST_DIR, "mbed", "rpc"),
+        "dependencies": [MBED_LIBRARIES, join(LIB_DIR, "rpc"), TEST_MBED_LIB],
+        "automated": False,
+        "mcu": ["LPC1768"]
+    },
+    {
+        "id": "MBED_16", "description": "RTC",
+        "source_dir": join(TEST_DIR, "mbed", "rtc"),
+        "dependencies": [MBED_LIBRARIES],
+        "automated": True,
+        "host_test": "rtc_auto",
+        "duration": 15
+    },
+    {
+        "id": "MBED_17", "description": "Serial Interrupt 2",
+        "source_dir": join(TEST_DIR, "mbed", "serial_interrupt_2"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_18", "description": "Local FS Directory",
+        "source_dir": join(TEST_DIR, "mbed", "dir"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_19", "description": "SD FS Directory",
+        "source_dir": join(TEST_DIR, "mbed", "dir_sd"),
+        "dependencies": [MBED_LIBRARIES, FS_LIBRARY],
+        "peripherals": ["SD"]
+    },
+    {
+        "id": "MBED_20", "description": "InterruptIn 2",
+        "source_dir": join(TEST_DIR, "mbed", "interruptin_2"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_21", "description": "freopen Stream",
+        "source_dir": join(TEST_DIR, "mbed", "freopen"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_22", "description": "Semihost",
+        "source_dir": join(TEST_DIR, "mbed", "semihost"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC2368", "LPC11U24", "KL05Z", "KL25Z", "KL46Z"]
+    },
+    {
+        "id": "MBED_23", "description": "Ticker Int us",
+        "source_dir": join(TEST_DIR, "mbed", "ticker_2"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "duration": 15,
+        "automated": True,
+        "host_test": "wait_us_auto"
+    },
+    {
+        "id": "MBED_24", "description": "Timeout Int us",
+        "source_dir": join(TEST_DIR, "mbed", "timeout"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "duration": 15,
+        "automated": True,
+        "host_test": "wait_us_auto"
+    },
+    {
+        "id": "MBED_25", "description": "Time us",
+        "source_dir": join(TEST_DIR, "mbed", "time_us"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "duration": 15,
+        "automated": True,
+        "host_test": "wait_us_auto"
+    },
+    {
+        "id": "MBED_26", "description": "Integer constant division",
+        "source_dir": join(TEST_DIR, "mbed", "div"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+    },
+    {
+        "id": "MBED_27", "description": "SPI ADXL345",
+        "source_dir": join(TEST_DIR, "mbed", "spi_ADXL345"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, join(PERIPHERALS, 'ADXL345')],
+        "peripherals": ["ADXL345"]
+    },
+    {
+        "id": "MBED_28", "description": "Interrupt chaining (InterruptManager)",
+        "source_dir": join(TEST_DIR, "mbed", "interrupt_chaining"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+    },
+    {
+        "id": "MBED_29", "description": "CAN network test",
+        "source_dir": join(TEST_DIR, "mbed", "can"),
+        "dependencies": [MBED_LIBRARIES],
+        "mcu": ["LPC1768", "LPC4088", "LPC1549"]
+    },
+    {
+        "id": "MBED_30", "description": "CAN network test using interrupts",
+        "source_dir": join(TEST_DIR, "mbed", "can_interrupt"),
+        "dependencies": [MBED_LIBRARIES],
+        "mcu": ["LPC1768", "LPC4088", "LPC1549"]
+    },
+    {
+        "id": "MBED_31", "description": "PWM LED test",
+        "source_dir": join(TEST_DIR, "mbed", "pwm_led"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+    {
+        "id": "MBED_32", "description": "Pin toggling",
+        "source_dir": join(TEST_DIR, "mbed", "pin_toggling"),
+        "dependencies": [MBED_LIBRARIES],
+    },
+
+    # CMSIS RTOS tests
+    {
+        "id": "CMSIS_RTOS_1", "description": "Basic",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "basic"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+    },
+    {
+        "id": "CMSIS_RTOS_2", "description": "Mutex",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "mutex"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 20
+    },
+    {
+        "id": "CMSIS_RTOS_3", "description": "Semaphore",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "semaphore"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 20
+    },
+    {
+        "id": "CMSIS_RTOS_4", "description": "Signals",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "signals"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+    },
+    {
+        "id": "CMSIS_RTOS_5", "description": "Queue",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "queue"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 20
+    },
+    {
+        "id": "CMSIS_RTOS_6", "description": "Mail",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "mail"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 20
+    },
+    {
+        "id": "CMSIS_RTOS_7", "description": "Timer",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "timer"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+    },
+    {
+        "id": "CMSIS_RTOS_8", "description": "ISR",
+        "source_dir": join(TEST_DIR, "rtos", "cmsis", "isr"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+    },
+
+    # mbed RTOS tests
+    {
+        "id": "RTOS_1", "description": "Basic thread",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "basic"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 15,
+        "automated": True,
+        "host_test": "wait_us_auto",
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_2", "description": "Mutex resource lock",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "mutex"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "duration": 20,
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_3", "description": "Semaphore resource lock",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "semaphore"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "duration": 20,
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_4", "description": "Signals messaging",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "signals"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_5", "description": "Queue messaging",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "queue"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_6", "description": "Mail messaging",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "mail"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_7", "description": "Timer",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "timer"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES],
+        "duration": 15,
+        "automated": True,
+        "host_test": "wait_us_auto",
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_8", "description": "ISR (Queue)",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "isr"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "mcu": ["LPC1768", "LPC1549", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+    {
+        "id": "RTOS_9", "description": "SD File write-read",
+        "source_dir": join(TEST_DIR, "rtos", "mbed", "file"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB, FS_LIBRARY],
+        "automated": True,
+        "peripherals": ["SD"],
+        "mcu": ["LPC1768", "LPC11U24", "LPC812", "KL25Z", "KL05Z", "K64F", "KL46Z"],
+    },
+
+    # Networking Tests
+    {
+        "id": "NET_1", "description": "TCP client hello world",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "tcpclient"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY, TEST_MBED_LIB],
+        "duration": 15,
+        "automated": True,
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_2", "description": "UDP client hello world",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "udpclient"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY, TEST_MBED_LIB],
+        "duration": 15,
+        "automated": True,
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_3", "description": "TCP echo server",
+        "source_dir": join(TEST_DIR, "net", "echo", "tcp_server"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": True,
+        "host_test" : "tcpecho_server_auto",
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_4", "description": "TCP echo client",
+        "source_dir": join(TEST_DIR, "net", "echo", "tcp_client"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": True,
+        "host_test": "tcpecho_client_auto",
+        "peripherals": ["ethernet"]
+    },
+    {
+        "id": "NET_5", "description": "UDP echo server",
+        "source_dir": join(TEST_DIR, "net", "echo", "udp_server"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": True,
+        "host_test" : "udpecho_server_auto",
+        "peripherals": ["ethernet"]
+    },
+    {
+        "id": "NET_6", "description": "UDP echo client",
+        "source_dir": join(TEST_DIR, "net", "echo", "udp_client"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": True,
+        "host_test" : "udpecho_client_auto",
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_7", "description": "HTTP client",
+        "source_dir": join(TEST_DIR, "net", "protocols", "HTTPClient_HelloWorld"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY, TEST_MBED_LIB],
+        "automated": True,
+        "duration": 15,
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_8", "description": "NTP client",
+        "source_dir": join(TEST_DIR, "net", "protocols", "NTPClient_HelloWorld"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY, TEST_MBED_LIB],
+        "automated": True,
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_9", "description": "Multicast Send",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "multicast_send"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_10", "description": "Multicast Receive",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "multicast_receive"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_11", "description": "Broadcast Send",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "broadcast_send"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_12", "description": "Broadcast Receive",
+        "source_dir": join(TEST_DIR, "net", "helloworld", "broadcast_receive"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_13", "description": "TCP client echo loop",
+        "source_dir": join(TEST_DIR, "net", "echo", "tcp_client_loop"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": True,
+        "duration": 15,
+        "host_test": "tcpecho_client_auto",
+        "peripherals": ["ethernet"],
+    },
+    {
+        "id": "NET_14", "description": "UDP PHY/Data link layer",
+        "source_dir": join(TEST_DIR, "net", "echo", "udp_link_layer"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, ETH_LIBRARY],
+        "automated": False,
+        "duration": 15,
+        "host_test": "udp_link_layer_auto.py",
+        "peripherals": ["ethernet"],
+    },
+
+    # u-blox tests
+    {
+        "id": "UB_1", "description": "u-blox USB modem: HTTP client",
+        "source_dir": [join(TEST_DIR, "net", "cellular", "http", "ubloxusb"), join(TEST_DIR, "net", "cellular", "http", "common")],
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, USB_HOST_LIBRARIES, UBLOX_LIBRARY],
+        "supported": CORTEX_ARM_SUPPORT,
+    },
+    {
+        "id": "UB_2", "description": "u-blox USB modem: SMS test",
+        "source_dir": [join(TEST_DIR, "net", "cellular", "sms", "ubloxusb"), join(TEST_DIR, "net", "cellular", "sms", "common")],
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, USB_HOST_LIBRARIES, UBLOX_LIBRARY],
+        "supported": CORTEX_ARM_SUPPORT,
+    },
+
+    # USB Tests
+    {
+        "id": "USB_1", "description": "Mouse",
+        "source_dir": join(TEST_DIR, "usb", "device", "basic"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+    {
+        "id": "USB_2", "description": "Keyboard",
+        "source_dir": join(TEST_DIR, "usb", "device", "keyboard"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+    {
+        "id": "USB_3", "description": "Mouse_Keyboard",
+        "source_dir": join(TEST_DIR, "usb", "device", "keyboard"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+    {
+        "id": "USB_4", "description": "Serial Port",
+        "source_dir": join(TEST_DIR, "usb", "device", "serial"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+        "supported": CORTEX_ARM_SUPPORT,
+    },
+    {
+        "id": "USB_5", "description": "Generic HID",
+        "source_dir": join(TEST_DIR, "usb", "device", "raw_hid"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+    {
+        "id": "USB_6", "description": "MIDI",
+        "source_dir": join(TEST_DIR, "usb", "device", "midi"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+    {
+        "id": "USB_7", "description": "AUDIO",
+        "source_dir": join(TEST_DIR, "usb", "device", "audio"),
+        "dependencies": [MBED_LIBRARIES, USB_LIBRARIES],
+    },
+
+    # CMSIS DSP
+    {
+        "id": "CMSIS_DSP_1", "description": "FIR",
+        "source_dir": join(TEST_DIR, "dsp", "cmsis", "fir_f32"),
+        "dependencies": [MBED_LIBRARIES, DSP_LIBRARIES],
+    },
+
+    # mbed DSP
+    {
+        "id": "DSP_1", "description": "FIR",
+        "source_dir": join(TEST_DIR, "dsp", "mbed", "fir_f32"),
+        "dependencies": [MBED_LIBRARIES, DSP_LIBRARIES],
+    },
+
+    # KL25Z
+    {
+        "id": "KL25Z_1", "description": "LPTMR",
+        "source_dir": join(TEST_DIR, "KL25Z", "lptmr"),
+        "dependencies": [MBED_LIBRARIES],
+        "supported": CORTEX_ARM_SUPPORT,
+        "mcu": ["KL25Z"],
+    },
+    {
+        "id": "KL25Z_2", "description": "PIT",
+        "source_dir": join(TEST_DIR, "KL25Z", "pit"),
+        "dependencies": [MBED_LIBRARIES],
+        "supported": CORTEX_ARM_SUPPORT,
+        "mcu": ["KL25Z"],
+    },
+    {
+        "id": "KL25Z_3", "description": "TSI Touch Sensor",
+        "source_dir": join(TEST_DIR, "mbed", "tsi"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, join(PERIPHERALS, 'TSI')],
+        "mcu": ["KL25Z"],
+    },
+    {
+        "id": "KL25Z_4", "description": "RTC",
+        "source_dir": join(TEST_DIR, "KL25Z", "rtc"),
+        "dependencies": [MBED_LIBRARIES],
+        "mcu": ["KL25Z"],
+    },
+    {
+        "id": "KL25Z_5", "description": "MMA8451Q accelerometer",
+        "source_dir": join(TEST_DIR, "mbed", "i2c_MMA8451Q"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, join(PERIPHERALS, 'MMA8451Q')],
+        "mcu": ["KL25Z", "KL05Z", "KL46Z", "K20D50M"],
+        "automated": True,
+        "duration": 15,
+        },
+
+    # Examples
+    {
+        "id": "EXAMPLE_1", "description": "/dev/null",
+        "source_dir": join(TEST_DIR, "mbed", "dev_null"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB],
+        "automated": True,
+        "host_test" : "dev_null_auto",
+    },
+    {
+        "id": "EXAMPLE_2", "description": "FS + RTOS",
+        "source_dir": join(TEST_DIR, "mbed", "fs"),
+        "dependencies": [MBED_LIBRARIES, RTOS_LIBRARIES, TEST_MBED_LIB, FS_LIBRARY],
+    },
+
+    # CPPUTEST Library provides Unit testing Framework
+    #
+    # To write TESTs and TEST_GROUPs please add CPPUTEST_LIBRARY to 'dependencies'
+    #
+    # This will also include:
+    # 1. test runner - main function with call to CommandLineTestRunner::RunAllTests(ac, av)
+    # 2. Serial console object to print test result on serial port console
+    #
+
+    # Unit testing with cpputest library
+    {
+        "id": "UT_1", "description": "Basic",
+        "source_dir": join(TEST_DIR, "utest", "basic"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, CPPUTEST_LIBRARY],
+        "automated": False,
+    },
+    {
+        "id": "UT_2", "description": "Semihost file system",
+        "source_dir": join(TEST_DIR, "utest", "semihost_fs"),
+        "dependencies": [MBED_LIBRARIES, TEST_MBED_LIB, CPPUTEST_LIBRARY],
+        "automated": False,
+        "mcu": ["LPC1768", "LPC2368", "LPC11U24"]
+    },
+]
+
+# Group tests with the same goals into categories
+GROUPS = {
+    "core": ["MBED_A1", "MBED_A2", "MBED_A3", "MBED_A18"],
+    "digital_io": ["MBED_A5", "MBED_A6", "MBED_A7", "MBED_A10", "MBED_A11"],
+    "analog_io": ["MBED_A8"],
+    "i2c": ["MBED_A19", "MBED_A20"],
+    "spi": ["MBED_A12"],
+}
+GROUPS["rtos"] = [test["id"] for test in TESTS if test["id"].startswith("RTOS_")]
+GROUPS["net"] = [test["id"] for test in TESTS if test["id"].startswith("NET_")]
+GROUPS["automated"] = [test["id"] for test in TESTS if test.get("automated", False)]
+# Look for 'TEST_GROUPS' in private_settings.py and update the GROUPS dictionary
+# with the information in test_groups if found
+try:
+    from workspace_tools.private_settings import TEST_GROUPS
+except:
+    TEST_GROUPS = {}
+GROUPS.update(TEST_GROUPS)
+
+class Test:
+    DEFAULTS = {
+        #'mcu': None,
+        'description': None,
+        'dependencies': None,
+        'duration': 10,
+        'host_test': 'host_test',
+        'automated': False,
+        'peripherals': None,
+        #'supported': None,
+        'source_dir': None,
+        'extra_files': None
+    }
+    def __init__(self, n):
+        self.n = n
+        self.__dict__.update(Test.DEFAULTS)
+        self.__dict__.update(TESTS[n])
+
+    def is_supported(self, target, toolchain):
+        if hasattr(self, 'mcu') and not target in self.mcu:
+            return False
+        if not hasattr(self, 'supported'):
+            return True
+        return (target in self.supported) and (toolchain in self.supported[target])
+
+    def get_description(self):
+        if self.description:
+            return self.description
+        else:
+            return self.id
+
+    def __cmp__(self, other):
+        return cmp(self.n, other.n)
+
+    def __str__(self):
+        return "[%3d] %s: %s" % (self.n, self.id, self.get_description())
+
+    def __getitem__(self, key):
+        if key == "id": return self.id
+        elif key == "mcu": return self.mcu
+        elif key == "dependencies": return self.dependencies
+        elif key == "description": return self.description
+        elif key == "duration": return self.duration
+        elif key == "host_test": return self.host_test
+        elif key == "automated": return self.automated
+        elif key == "peripherals": return self.peripherals
+        elif key == "supported": return self.supported
+        elif key == "source_dir": return self.source_dir
+        elif key == "extra_files": return self.extra_files
+        else:
+            return None
+
+TEST_MAP = dict([(test['id'], Test(i)) for i, test in enumerate(TESTS)])
